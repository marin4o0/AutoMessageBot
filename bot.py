import os
import discord
from discord.ext import commands
from discord import app_commands
import asyncio
import json
from typing import Optional
from datetime import datetime

import logging, sys
logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
print("üöÄ –°—Ç–∞—Ä—Ç–∏—Ä–∞–º Discord –∫–ª–∏–µ–Ω—Ç–∞...", flush=True)

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
TOKEN = os.getenv("DISCORD_TOKEN")
CHANNEL_ID = int(os.getenv("DISCORD_CHANNEL_ID")) if os.getenv("DISCORD_CHANNEL_ID") else None
GUILD_ID = int(os.getenv("GUILD_ID")) if os.getenv("GUILD_ID") else None
SAVE_FILE = "active_messages.json"
ALLOWED_ROLES = ["Admin", "Moderator"]
print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Environment Variables:")
print("DISCORD_TOKEN:", "‚úÖ –Ω–∞–º–µ—Ä–µ–Ω" if TOKEN else "‚ùå –ª–∏–ø—Å–≤–∞")
print("GUILD_ID:", GUILD_ID)
print("DISCORD_CHANNEL_ID:", CHANNEL_ID)

# === Intents ===
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree
guild = discord.Object(id=GUILD_ID) if GUILD_ID else None
active_messages = {}

# === –ü–æ–º–æ—â–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def has_permission(user: discord.Member) -> bool:
    if user.guild_permissions.administrator:
        return True
    for role in user.roles:
        if role.name in ALLOWED_ROLES:
            return True
    return False

def save_messages():
    data = {}
    for msg_id, msg in active_messages.items():
        data[msg_id] = {
            "message": msg.get("message"),
            "interval": msg.get("interval"),
            "repeat": msg.get("repeat"),
            "id": msg.get("id"),
            "creator": msg.get("creator"),
            "status": msg.get("status", "active"),
            "channel_id": msg.get("channel_id", None)
        }
    with open(SAVE_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def get_message_data(msg_id: str) -> Optional[dict]:
    return active_messages.get(msg_id)

def get_stored_message_content(msg_id: str) -> str:
    data = get_message_data(msg_id)
    return data.get("message", "") if data else ""

def get_stored_interval(msg_id: str) -> Optional[int]:
    data = get_message_data(msg_id)
    return data.get("interval") if data else None

def get_stored_repeat(msg_id: str) -> Optional[int]:
    data = get_message_data(msg_id)
    return data.get("repeat") if data else None

def get_stored_channel_id(msg_id: str) -> Optional[int]:
    data = get_message_data(msg_id)
    return data.get("channel_id") if data else None

def update_message_content_value(msg_id: str, new_content: str) -> None:
    data = get_message_data(msg_id)
    if not data:
        raise KeyError(msg_id)
    data["message"] = new_content
    save_messages()

def update_interval_value(msg_id: str, new_interval: int) -> None:
    data = get_message_data(msg_id)
    if not data:
        raise KeyError(msg_id)
    data["interval"] = new_interval
    save_messages()

def update_repeat_value(msg_id: str, new_repeat: int) -> None:
    data = get_message_data(msg_id)
    if not data:
        raise KeyError(msg_id)
    data["repeat"] = new_repeat
    save_messages()

def update_channel_value(msg_id: str, new_channel_id: Optional[int]) -> None:
    data = get_message_data(msg_id)
    if not data:
        raise KeyError(msg_id)
    data["channel_id"] = new_channel_id
    save_messages()

# === Task –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏ —Å—ä–æ–±—â–µ–Ω–∏—è ===
async def restart_message_task(msg_id: str, start_immediately: bool = True):
    msg_data = active_messages.get(msg_id)
    if not msg_data:
        return

    if msg_data.get("task"):
        try:
            msg_data["task"].cancel()
        except Exception:
            pass

    if msg_data.get("status") != "active":
        msg_data["task"] = None
        return

    target_channel_id = msg_data.get("channel_id") or CHANNEL_ID
    channel = bot.get_channel(target_channel_id) if target_channel_id else None
    if not channel:
        msg_data["status"] = "stopped"
        msg_data["task"] = None
        save_messages()
        return

    async def task_func():
        count = 0
        repeat = msg_data.get("repeat", 0)
        interval = msg_data.get("interval", 0)
        if not start_immediately and interval > 0:
            await asyncio.sleep(interval * 60)

        while True:
            if repeat != 0 and count >= repeat:
                msg_data["status"] = "stopped"
                break

            try:
                await channel.send(msg_data.get("message", ""))
            except Exception as e:
                print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–∞—â–∞–Ω–µ –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ ({msg_id}): {e}")
                break

            count += 1
            if interval <= 0:
                msg_data["status"] = "stopped"
                break

            try:
                await asyncio.sleep(interval * 60)
            except asyncio.CancelledError:
                break

        msg_data["task"] = None
        save_messages()

    msg_data["task"] = asyncio.create_task(task_func())
    save_messages()

async def load_messages():
    if not os.path.exists(SAVE_FILE):
        return
    with open(SAVE_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    for msg_id, msg in data.items():
        active_messages[msg_id] = msg
        active_messages[msg_id]["task"] = None
        await restart_message_task(msg_id, start_immediately=True)

def build_info_embed(msg_data: dict) -> discord.Embed:
    status = msg_data.get("status", "unknown")
    color = discord.Color.green() if status == "active" else discord.Color.red()
    repeat_display = "‚àû" if msg_data.get("repeat") == 0 else str(msg_data.get("repeat"))
    channel_id = msg_data.get("channel_id")
    channel_mention = f"<#{channel_id}>" if channel_id else "‚Äî"

    embed = discord.Embed(title=f"üÜî {msg_data.get('id')} ({status})", color=color)
    embed.add_field(name="Message", value=msg_data.get("message", "-"), inline=False)
    embed.add_field(name="Interval", value=f"{msg_data.get('interval', '-') } –º–∏–Ω", inline=True)
    embed.add_field(name="Repeat", value=repeat_display, inline=True)
    embed.add_field(name="Creator", value=msg_data.get("creator", "-"), inline=False)
    embed.add_field(name="Channel", value=channel_mention, inline=False)
    embed.timestamp = datetime.utcnow()
    return embed

# === Edit Modal —Å Channel ID –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª–Ω–æ –ø–æ–ø—ä–ª–Ω–µ–Ω–æ ===
class EditModal(discord.ui.Modal):
    def __init__(self, msg_id: str, guild: discord.Guild):
        super().__init__(title="Edit Message")
        self.msg_id = msg_id
        self.guild = guild

        self.content_input = discord.ui.TextInput(label="Message", default=get_stored_message_content(msg_id)[:1900])
        self.interval_input = discord.ui.TextInput(label="Interval (minutes)", default=str(get_stored_interval(msg_id) or 0))
        self.repeat_input = discord.ui.TextInput(label="Repeat count (0=‚àû)", default=str(get_stored_repeat(msg_id) or 0))
        
        # ‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª–Ω–æ –ø–æ–ø—ä–ª–≤–∞–Ω–µ —Å —Ç–µ–∫—É—â –∫–∞–Ω–∞–ª (ID)
        current_channel_id = get_stored_channel_id(msg_id) or CHANNEL_ID or ""
        self.channel_input = discord.ui.TextInput(label="Channel (ID)", default=str(current_channel_id))

        self.add_item(self.content_input)
        self.add_item(self.interval_input)
        self.add_item(self.repeat_input)
        self.add_item(self.channel_input)

    async def on_submit(self, interaction: discord.Interaction):
        update_message_content_value(self.msg_id, self.content_input.value)
        update_interval_value(self.msg_id, int(self.interval_input.value))
        update_repeat_value(self.msg_id, int(self.repeat_input.value))

        channel_value = self.channel_input.value.strip()
        new_channel_id = None
        if channel_value.isdigit():
            new_channel_id = int(channel_value)
            channel_obj = self.guild.get_channel(new_channel_id)
            if not channel_obj or not isinstance(channel_obj, discord.TextChannel):
                await interaction.response.send_message(f"‚ùå –ö–∞–Ω–∞–ª —Å ID {new_channel_id} –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞.", ephemeral=True)
                return
        elif channel_value:
            channel_obj = discord.utils.get(self.guild.text_channels, name=channel_value)
            if not channel_obj:
                await interaction.response.send_message(f"‚ùå –ö–∞–Ω–∞–ª —Å –∏–º–µ '{channel_value}' –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω.", ephemeral=True)
                return
            new_channel_id = channel_obj.id

        if new_channel_id:
            update_channel_value(self.msg_id, new_channel_id)

        msg = get_message_data(self.msg_id)
        if msg and msg.get("status") == "active":
            await restart_message_task(self.msg_id, start_immediately=False)

        await interaction.response.send_message("‚úÖ –°—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –±–µ—à–µ –æ–±–Ω–æ–≤–µ–Ω–æ.", ephemeral=True)
# === FullMessageButtons —Å callback —Ñ—É–Ω–∫—Ü–∏–∏ ===
class FullMessageButtons(discord.ui.View):
    def __init__(self, msg_id: str, guild: discord.Guild):
        super().__init__(timeout=None)
        self.msg_id = msg_id
        self.guild = guild

    @discord.ui.button(label="‚ñ∂Ô∏è Start", style=discord.ButtonStyle.green)
    async def start_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not has_permission(interaction.user):
            await interaction.response.send_message("üö´ –ù—è–º–∞—à –ø—Ä–∞–≤–∞.", ephemeral=True)
            return
        msg = active_messages.get(self.msg_id)
        if not msg:
            await interaction.response.send_message("‚ùå –°—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–æ.", ephemeral=True)
            return
        if msg["status"] == "active":
            await interaction.response.send_message("‚ö†Ô∏è –í–µ—á–µ –µ –∞–∫—Ç–∏–≤–Ω–æ.", ephemeral=True)
            return
        msg["status"] = "active"
        await restart_message_task(self.msg_id)
        await interaction.response.send_message(f"‚úÖ '{self.msg_id}' —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–æ.", ephemeral=True)

    @discord.ui.button(label="‚èπÔ∏è Stop", style=discord.ButtonStyle.blurple)
    async def stop_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not has_permission(interaction.user):
            await interaction.response.send_message("üö´ –ù—è–º–∞—à –ø—Ä–∞–≤–∞.", ephemeral=True)
            return
        msg = active_messages.get(self.msg_id)
        if not msg:
            await interaction.response.send_message("‚ùå –°—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞.", ephemeral=True)
            return
        msg["status"] = "stopped"
        task = msg.get("task")
        if task:
            try:
                task.cancel()
            except Exception:
                pass
        save_messages()
        await interaction.response.send_message(f"‚è∏Ô∏è '{self.msg_id}' –µ —Å–ø—Ä—è–Ω–æ.", ephemeral=True)

    @discord.ui.button(label="üóëÔ∏è Delete", style=discord.ButtonStyle.red)
    async def delete_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not has_permission(interaction.user):
            await interaction.response.send_message("üö´ –ù—è–º–∞—à –ø—Ä–∞–≤–∞.", ephemeral=True)
            return
        msg = active_messages.pop(self.msg_id, None)
        if msg and msg.get("task"):
            try:
                msg["task"].cancel()
            except Exception:
                pass
        save_messages()
        await interaction.response.send_message(f"üóëÔ∏è '{self.msg_id}' –∏–∑—Ç—Ä–∏—Ç–æ.", ephemeral=True)

    @discord.ui.button(label="‚úèÔ∏è Edit", style=discord.ButtonStyle.gray)
    async def edit_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not has_permission(interaction.user):
            await interaction.response.send_message("üö´ –ù—è–º–∞—à –ø—Ä–∞–≤–∞.", ephemeral=True)
            return
        await interaction.response.send_modal(EditModal(self.msg_id, self.guild))
# === Commands ===
@tree.command(name="create", description="–°—ä–∑–¥–∞–π –Ω–æ–≤–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ.")
@app_commands.describe(
    message="–¢–µ–∫—Å—Ç –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ",
    interval="–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∏",
    repeat="–ë—Ä–æ–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (0 = –±–µ–∑–∫—Ä–∞–π–Ω–æ)",
    id="–£–Ω–∏–∫–∞–ª–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä",
    channel="–ö–∞–Ω–∞–ª –∑–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ"
)
async def create(interaction: discord.Interaction, message: str, interval: int, repeat: int, id: str, channel: Optional[discord.TextChannel] = None):
    if not has_permission(interaction.user):
        await interaction.response.send_message("üö´ –ù—è–º–∞—à –ø—Ä–∞–≤–∞.", ephemeral=True)
        return
    if id in active_messages:
        await interaction.response.send_message(f"‚ö†Ô∏è –°—ä–æ–±—â–µ–Ω–∏–µ —Å ID '{id}' –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞.", ephemeral=True)
        return

    channel_id_for_task = channel.id if channel else (CHANNEL_ID if CHANNEL_ID else None)
    if not channel_id_for_task:
        await interaction.response.send_message("‚ùå –ù–µ –µ –∑–∞–¥–∞–¥–µ–Ω –∫–∞–Ω–∞–ª. –ú–æ–∂–µ—Ç–µ –¥–∞ –ø–æ–¥–∞–¥–µ—Ç–µ –∫–∞–Ω–∞–ª –∫–∞—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—ä—Ä –∏–ª–∏ –¥–∞ –∑–∞–¥–∞–¥–µ—Ç–µ CHANNEL_ID –≤ env.", ephemeral=True)
        return

    msg_data = {
        "task": None,
        "message": message,
        "interval": interval,
        "repeat": repeat,
        "id": id,
        "creator": interaction.user.name,
        "status": "active",
        "channel_id": channel_id_for_task
    }

    active_messages[id] = msg_data
    save_messages()
    await restart_message_task(id, start_immediately=True)
    await interaction.response.send_message(f"‚úÖ –°—ä–∑–¥–∞–¥–µ–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ '{id}'.", ephemeral=True)


@tree.command(name="list", description="–ü–æ–∫–∞–∂–∏ –≤—Å–∏—á–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏ —Å—ä–æ–±—â–µ–Ω–∏—è.")
async def list_messages(interaction: discord.Interaction):
    if not has_permission(interaction.user):
        await interaction.response.send_message("üö´ –ù—è–º–∞—à –ø—Ä–∞–≤–∞.", ephemeral=True)
        return
    if not active_messages:
        await interaction.response.send_message("‚ÑπÔ∏è –ù—è–º–∞ —Å—ä–æ–±—â–µ–Ω–∏—è.", ephemeral=True)
        return

    # –ü—Ä–∞—â–∞–º–µ –ø—ä—Ä–≤–æ –µ–¥–Ω–æ –∫—Ä–∞—Ç–∫–æ –µ–øhemeral —Å—ä–æ–±—â–µ–Ω–∏–µ, —Å–ª–µ–¥ —Ç–æ–≤–∞ followup-–∏—Ç–µ —Å embed-–∏—Ç–µ
    await interaction.response.send_message("üìã –í—Å–∏—á–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏ —Å—ä–æ–±—â–µ–Ω–∏—è:", ephemeral=True)
    for msg in active_messages.values():
        embed = build_info_embed(msg)
        # followup.send - –∏–∑–ø–æ–ª–∑–≤–∞–º–µ try/except –≤ —Å–ª—É—á–∞–π —á–µ followup –Ω–µ –º–æ–∂–µ –¥–∞ –±—ä–¥–µ –∏–∑–ø—ä–ª–Ω–µ–Ω
        try:
            await interaction.followup.send(embed=embed, view=FullMessageButtons(msg['id'], interaction.guild), ephemeral=True)
        except Exception as e:
            print(f"‚ùå –ù–µ —É—Å–ø—è –¥–∞ —Å–µ –∏–∑–ø—Ä–∞—Ç–∏ followup –∑–∞ {msg.get('id')}: {e}")


# === HELP –∫–æ–º–∞–Ω–¥–∞ (–ø—ä–ª–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –∫–∞–∫ –¥–∞ –∫–æ–ø–∏—Ä–∞—Ç–µ Channel ID) ===
@tree.command(name="help", description="–ü–æ–∫–∞–∑–≤–∞ –ø–æ–º–æ—â –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –∫–æ–º–∞–Ω–¥–∏—Ç–µ.")
@app_commands.describe(command="(–ø–æ –∏–∑–±–æ—Ä) –∏–º–µ –Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞")
async def help_command(interaction: discord.Interaction, command: Optional[str] = None):
    # –ù—è–º–∞ –Ω—É–∂–¥–∞ –æ—Ç –ø—Ä–∞–≤–∞ ‚Äî –ø–æ–∑–≤–æ–ª—è–≤–∞–º–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –¥–∞ –≤–∏–¥—è—Ç –ø–æ–º–æ—â—Ç–∞
    # –ê–∫–æ –µ –ø–æ–¥–∞–¥–µ–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏–º–µ, –ø–æ–∫–∞–∑–≤–∞–º–µ –¥–µ—Ç–∞–π–ª–∏, –∏–Ω–∞—á–µ –æ–±—â –ø—Ä–µ–≥–ª–µ–¥
    commands_info = {
        "create": {
            "description": "–°—ä–∑–¥–∞–≤–∞ –Ω–æ–≤–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ.",
            "usage": "/create message:<—Ç–µ–∫—Å—Ç> interval:<–º–∏–Ω—É—Ç–∏> repeat:<–±—Ä–æ–π (0=‚àû)> id:<—É–Ω–∏–∫–∞–ª–Ω–æ> [channel:<–∫–∞–Ω–∞–ª>]",
            "example": "/create message:–ó–¥—Ä–∞–≤–µ–π! interval:60 repeat:0 id:morning channel:#announcements"
        },
        "list": {
            "description": "–ü–æ–∫–∞–∑–≤–∞ –≤—Å–∏—á–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏ —Å—ä–æ–±—â–µ–Ω–∏—è –∏ –±—É—Ç–æ–Ω–∏ –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.",
            "usage": "/list",
            "example": "/list"
        },
        "help": {
            "description": "–ü–æ–∫–∞–∑–≤–∞ —Å–ø—Ä–∞–≤–∫–∞ –∑–∞ –∫–æ–º–∞–Ω–¥–∏—Ç–µ.",
            "usage": "/help [command]",
            "example": "/help create"
        }
    }

    if command:
        cmd = command.lower()
        info = commands_info.get(cmd)
        if not info:
            await interaction.response.send_message(f"‚ö†Ô∏è –ù–µ —Ä–∞–∑–±–∏—Ä–∞–º –∫–æ–º–∞–Ω–¥–∞ '{command}'. –í–∏–∂—Ç–µ /help –∑–∞ –Ω–∞–ª–∏—á–Ω–∏ –∫–æ–º–∞–Ω–¥–∏.", ephemeral=True)
            return
        embed = discord.Embed(title=f"/{cmd} ‚Äî –ø–æ–º–æ—â", color=discord.Color.blue())
        embed.add_field(name="–û–ø–∏—Å–∞–Ω–∏–µ", value=info["description"], inline=False)
        embed.add_field(name="–£–ø–æ—Ç—Ä–µ–±–∞", value=info["usage"], inline=False)
        embed.add_field(name="–ü—Ä–∏–º–µ—Ä", value=info["example"], inline=False)
        # –î–æ–±–∞–≤—è–º–µ –∫—Ä–∞—Ç—ä–∫ –±–ª–æ–∫ —Å –∫–∞–∫ –¥–∞ –∫–æ–ø–∏—Ä–∞—Ç–µ Channel ID
        embed.add_field(
            name="–ö–∞–∫ –¥–∞ –∫–æ–ø–∏—Ä–∞—Ç–µ Channel ID (Discord)",
            value=(
                "1) –û—Ç–∏–¥–µ—Ç–µ –≤ Settings > Advanced –∏ –≤–∫–ª—é—á–µ—Ç–µ **Developer Mode**.\n"
                "2) –û—Ç–∏–¥–µ—Ç–µ –Ω–∞ –∂–µ–ª–∞–Ω–∏—è –∫–∞–Ω–∞–ª, –Ω–∞—Ç–∏—Å–Ω–µ—Ç–µ –¥–µ—Å–µ–Ω –±—É—Ç–æ–Ω –≤—ä—Ä—Ö—É –∏–º–µ—Ç–æ –º—É.\n"
                "3) –ò–∑–±–µ—Ä–µ—Ç–µ **Copy ID** ‚Äî —Ç–æ–≤–∞ –µ —á–∏—Å–ª–æ—Ç–æ, –∫–æ–µ—Ç–æ –º–æ–∂–µ—Ç–µ –¥–∞ –ø–æ–¥–∞–¥–µ—Ç–µ –∫–∞—Ç–æ `channel`.\n\n"
                "–ú–æ–∂–µ—Ç–µ –¥–∞ –ø–æ–¥–∞–¥–µ—Ç–µ –∫–∞–Ω–∞–ª –∫–∞—Ç–æ mention (–Ω–∞–ø—Ä. #announcements) –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–Ω–æ –∫–∞—Ç–æ ID (–Ω–∞–ø—Ä. 123456789012345678)."
            ),
            inline=False
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return

    # –û–±—â –ø—Ä–µ–≥–ª–µ–¥
    embed = discord.Embed(title="–ü–æ–º–æ—â ‚Äî –ö–æ–º–∞–Ω–¥–∏", color=discord.Color.blue())
    for name, info in commands_info.items():
        embed.add_field(name=f"/{name}", value=f"{info['description']}\n`Usage:` {info['usage']}", inline=False)
    embed.set_footer(text="–ó–∞ –¥–µ—Ç–∞–π–ª–∏ –Ω–∞–ø–∏—à–µ—Ç–µ /help <command>. –ó–∞ –∫–æ–ø–∏—Ä–∞–Ω–µ –Ω–∞ Channel ID ‚Äî –≤–∏–∂—Ç–µ –¥–µ—Ç–∞–π–ª–∏—Ç–µ –ø—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –∫–æ–º–∞–Ω–¥–∞.")
    await interaction.response.send_message(embed=embed, ephemeral=True)


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞ –≥—Ä–µ—à–∫–∏ –Ω–∞ app commands (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç—è–≤–∞ –≥–æ–ª–µ–º–∏ tracebacks –∫–∞—Ç–æ CommandNotFound) ===
@tree.error
async def on_app_command_error(interaction: discord.Interaction, error: app_commands.AppCommandError):
    # CommandNotFound —Å–µ –ø–æ—è–≤—è–≤–∞ –∫–æ–≥–∞—Ç–æ interaction —Å—ä–¥—ä—Ä–∂–∞ –∫–æ–º–∞–Ω–¥–∞, –∫–æ—è—Ç–æ –≤–µ—á–µ –Ω–µ –µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω–∞ (cache / —Å—Ç–∞—Ä–æ)
    if isinstance(error, app_commands.CommandNotFound):
        # –∫—Ä–∞—Ç–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚Äî –Ω–µ –ø–µ—á–∞—Ç–∞–º–µ –≥–æ–ª—è–º traceback
        try:
            await interaction.response.send_message("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞ (–≤—ä–∑–º–æ–∂–Ω–æ –µ –¥–∞ –µ –±–∏–ª–∞ –ø—Ä–µ–º–∞—Ö–Ω–∞—Ç–∞/–ø—Ä–æ–º–µ–Ω–µ–Ω–∞). –û–ø–∏—Ç–∞–π—Ç–µ –¥–∞ –æ—Ç–≤–æ—Ä–∏—Ç–µ –º–µ–Ω—é—Ç–æ –Ω–∞ slash –∫–æ–º–∞–Ω–¥–∏—Ç–µ –æ—Ç–Ω–æ–≤–æ.", ephemeral=True)
        except Exception:
            pass
        return

    # –ó–∞ –æ—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ app command –≥—Ä–µ—à–∫–∏ ‚Äî –ª–æ–≥–≤–∞–º–µ –∏ –≤—Ä—ä—â–∞–º–µ –æ–±—â–æ —Å—ä–æ–±—â–µ–Ω–∏–µ
    print(f"Unhandled app command error: {error}")
    try:
        await interaction.response.send_message("‚ùå –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥–∞—Ç–∞.", ephemeral=True)
    except Exception:
        pass


# === –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –±–æ—Ç–∞ ===
@bot.event
async def on_ready():
    print(f"‚úÖ –í–ª—è–∑—ä–ª —Å—ä–º –∫–∞—Ç–æ {bot.user} (–±–æ—Ç—ä—Ç –µ –æ–Ω–ª–∞–π–Ω)", flush=True)

    async def post_start_tasks():
        await asyncio.sleep(5)  # –∏–∑—á–∞–∫–≤–∞–º–µ Discord –¥–∞ –µ –Ω–∞–ø—ä–ª–Ω–æ –≥–æ—Ç–æ–≤

        # === –ò–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ä–∏ –∫–æ–º–∞–Ω–¥–∏ ===
        try:
            if guild:
                existing = await tree.fetch_commands(guild=guild)
            else:
                existing = await tree.fetch_commands()

            for cmd in existing:
                if cmd.name not in ["create", "list", "help"]:
                    print(f"üßπ –ü—Ä–µ–º–∞—Ö–≤–∞–º —Å—Ç–∞—Ä–∞ –∫–æ–º–∞–Ω–¥–∞: /{cmd.name}", flush=True)
                    try:
                        if guild:
                            await tree.remove_command(cmd.name, guild=guild)
                        else:
                            await tree.remove_command(cmd.name)
                    except Exception as inner:
                        print(f"‚ö†Ô∏è –ù–µ—É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ {cmd.name}: {inner}", flush=True)

            if guild:
                await tree.sync(guild=guild)
                print(f"üîÅ Slash –∫–æ–º–∞–Ω–¥–∏—Ç–µ —Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–∏ —Å guild {guild.id}", flush=True)
            else:
                await tree.sync()
                print("üåç Slash –∫–æ–º–∞–Ω–¥–∏—Ç–µ —Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–∏ –≥–ª–æ–±–∞–ª–Ω–æ.", flush=True)
        except Exception as e:
            print(f"‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—á–∏—Å—Ç–≤–∞–Ω–µ/—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏: {e}", flush=True)

        # === –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏—è ===
        try:
            await load_messages()
            print("üí¨ –ó–∞—Ä–µ–¥–µ–Ω–∏ —Å–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ç–µ —Å—ä–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–¥–∞—á–∏—Ç–µ —Å–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–∏.", flush=True)
        except Exception as e:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ load_messages: {e}", flush=True)

    # –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ –ø–æ—Å—Ç-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω–∏—Ç–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –¥–∞ –±–ª–æ–∫–∏—Ä–∞–º–µ on_ready()
    bot.loop.create_task(post_start_tasks())

