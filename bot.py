import os
import discord
from discord.ext import commands
from discord import app_commands
import asyncio
import json
from typing import Optional

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
TOKEN = os.getenv("DISCORD_TOKEN")
# –¢–µ–∑–∏ env –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏ —Å–ª—É–∂–∞—Ç –∑–∞ default –∫–∞–Ω–∞–ª / guild, –Ω–æ –≤—Å—è–∫–æ —Å—ä–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ –¥–∞ –∏–º–∞ —Å–≤–æ–π channel_id
CHANNEL_ID = int(os.getenv("DISCORD_CHANNEL_ID")) if os.getenv("DISCORD_CHANNEL_ID") else None
GUILD_ID = int(os.getenv("GUILD_ID")) if os.getenv("GUILD_ID") else None
SAVE_FILE = "active_messages.json"

# –†–æ–ª–∏ —Å –¥–æ—Å—Ç—ä–ø –¥–æ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∏
ALLOWED_ROLES = ["Admin", "Moderator"]

# === Intents ===
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree
guild = discord.Object(id=GUILD_ID) if GUILD_ID else None

active_messages = {}  # id -> {task, message, interval, repeat, id, creator, status, embed_message_id, channel_id}

# === –ü–æ–º–æ—â–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def has_permission(user: discord.Member) -> bool:
    if user.guild_permissions.administrator:
        return True
    for role in user.roles:
        if role.name in ALLOWED_ROLES:
            return True
    return False

def has_edit_permission(member: discord.Member) -> bool:
    """Return True if the member can access edit operations."""
    return has_permission(member)

def save_messages():
    data = {}
    for msg_id, msg in active_messages.items():
        data[msg_id] = {
            "message": msg.get("message"),
            "interval": msg.get("interval"),
            "repeat": msg.get("repeat"),
            "id": msg.get("id"),
            "creator": msg.get("creator"),
            "status": msg.get("status", "active"),
            "embed_message_id": msg.get("embed_message_id"),
            "channel_id": msg.get("channel_id", None)
        }
    with open(SAVE_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def record_embed_message_id(msg_id: str, message_id: Optional[int]):
    msg_data = active_messages.get(msg_id)
    if not msg_data:
        return
    if msg_data.get("embed_message_id") == message_id:
        return
    msg_data["embed_message_id"] = message_id
    save_messages()

def get_message_data(msg_id: str) -> Optional[dict]:
    return active_messages.get(msg_id)

def get_stored_message_content(msg_id: str) -> str:
    data = get_message_data(msg_id)
    return data.get("message", "") if data else ""

def get_stored_interval(msg_id: str) -> Optional[int]:
    data = get_message_data(msg_id)
    if not data:
        return None
    return data.get("interval")

def get_stored_repeat(msg_id: str) -> Optional[int]:
    data = get_message_data(msg_id)
    if not data:
        return None
    return data.get("repeat")

def get_stored_channel_id(msg_id: str) -> Optional[int]:
    data = get_message_data(msg_id)
    if not data:
        return None
    return data.get("channel_id")

def update_message_content_value(msg_id: str, new_content: str) -> None:
    data = get_message_data(msg_id)
    if not data:
        raise KeyError(msg_id)
    data["message"] = new_content
    save_messages()

def update_interval_value(msg_id: str, new_interval: int) -> None:
    data = get_message_data(msg_id)
    if not data:
        raise KeyError(msg_id)
    data["interval"] = new_interval
    save_messages()

def update_repeat_value(msg_id: str, new_repeat: int) -> None:
    data = get_message_data(msg_id)
    if not data:
        raise KeyError(msg_id)
    data["repeat"] = new_repeat
    save_messages()

def update_channel_value(msg_id: str, new_channel_id: Optional[int]) -> None:
    data = get_message_data(msg_id)
    if not data:
        raise KeyError(msg_id)
    data["channel_id"] = new_channel_id
    save_messages()

async def restart_message_task(msg_id: str, start_immediately: bool = True):
    """
    –†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞/—Å—Ç–∞—Ä—Ç–∏—Ä–∞ –∑–∞–¥–∞—á–∞—Ç–∞ –∑–∞ –¥–∞–¥–µ–Ω–æ msg_id.
    –ê–∫–æ start_immediately == False -> –ø—ä—Ä–≤–æ—Ç–æ –∏–∑–ø—Ä–∞—â–∞–Ω–µ —â–µ –∏–∑—á–∞–∫–∞ 'interval' –º–∏–Ω—É—Ç–∏.
    –¢–æ–≤–∞ –ø–æ–∑–≤–æ–ª—è–≤–∞ –ø—Ä–∏ edit –¥–∞ –Ω–µ —Å–µ –∏–∑–ø—Ä–∞—â–∞ –≤–µ–¥–Ω–∞–≥–∞.
    """
    msg_data = active_messages.get(msg_id)
    if not msg_data:
        return

    existing_task = msg_data.get("task")
    if existing_task:
        existing_task.cancel()

    if msg_data.get("status") != "active":
        msg_data["task"] = None
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–º–µ –∫–∞–Ω–∞–ª: –∞–∫–æ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –∏–º–∞ —Å–æ–±—Å—Ç–≤–µ–Ω channel_id, –≥–æ –ø–æ–ª–∑–≤–∞–º–µ; –∏–Ω–∞—á–µ default CHANNEL_ID
    target_channel_id = msg_data.get("channel_id") or CHANNEL_ID
    channel = bot.get_channel(target_channel_id) if target_channel_id else None
    if not channel:
        print(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª—ä—Ç —Å ID {target_channel_id} –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –∑–∞ –∑–∞–¥–∞—á–∞ {msg_id}.")
        msg_data["status"] = "stopped"
        msg_data["task"] = None
        save_messages()
        return

    async def task_func():
        count = 0
        completed_naturally = False
        try:
            # –∞–∫–æ –Ω–µ –∏—Å–∫–∞–º–µ –≤–µ–¥–Ω–∞–≥–∞ –¥–∞ –ø—Ä–∞—â–∞–º–µ (–Ω–∞–ø—Ä. —Å–ª–µ–¥ edit), –ø—ä—Ä–≤–æ —á–∞–∫–∞–º–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            interval_minutes = msg_data.get("interval", 0)
            first_wait = not start_immediately
            if first_wait and interval_minutes > 0:
                try:
                    await asyncio.sleep(interval_minutes * 60)
                except asyncio.CancelledError:
                    raise

            while True:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ repeat
                if msg_data.get("repeat", 0) != 0 and count >= msg_data.get("repeat", 0):
                    completed_naturally = True
                    break

                try:
                    await channel.send(msg_data.get("message", ""))
                except discord.Forbidden:
                    print(f"‚ùå –ù—è–º–∞–º –ø—Ä–∞–≤–∞ –¥–∞ –ø—É—Å–Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª {target_channel_id}.")
                    # —Å–ø–∏—Ä–∞–º, –∑–∞ –¥–∞ –Ω–µ –∑–∞—Ü–∏–∫–ª—è
                    completed_naturally = True
                    break
                except Exception as e:
                    print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–∞—â–∞–Ω–µ –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ ({msg_id}): {e}")
                    # –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞–º–µ, –º–æ–∂–µ –¥–∞ –µ –≤—Ä–µ–º–µ–Ω–Ω–∞
                count += 1

                interval_minutes = msg_data.get("interval", 0)
                if interval_minutes <= 0:
                    completed_naturally = True
                    break

                try:
                    await asyncio.sleep(interval_minutes * 60)
                except asyncio.CancelledError:
                    raise
        except asyncio.CancelledError:
            pass
        finally:
            current_data = active_messages.get(msg_id)
            if not current_data:
                return
            current_data["task"] = None
            if completed_naturally:
                current_data["status"] = "stopped"
                await update_embed_status(msg_id)
                save_messages()

    msg_data["task"] = asyncio.create_task(task_func())
    save_messages()

async def load_messages():
    if not os.path.exists(SAVE_FILE):
        return
    with open(SAVE_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    for msg_id, msg in data.items():
        # –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ
        active_messages[msg_id] = msg
        active_messages[msg_id]["task"] = None
        # –ê–∫–æ –µ active, —Ä–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–º, –Ω–æ –∑–∞–ø–æ—á–≤–∞–º —Å –ø—ä—Ä–≤–æ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –≤–µ–¥–Ω–∞–≥–∞ (–ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç –¥–∞ –ø—Ä–æ–¥—ä–ª–∂–∏ –∫–∞–∫—Ç–æ –µ –±–∏–ª–æ)
        await restart_message_task(msg_id, start_immediately=True)
        await update_embed_status(msg_id)

def build_configuration_embed(msg_data: dict, show_channel_public: bool = False) -> discord.Embed:
    status = msg_data.get("status", "unknown")
    color = discord.Color.green() if status == "active" else discord.Color.red()
    repeat_display = "‚àû" if msg_data.get("repeat") == 0 else str(msg_data.get("repeat", "-"))
    embed = discord.Embed(
        title=f"üÜî {msg_data.get('id', 'unknown')} ({status})",
        color=color
    )
    embed.add_field(name="Message", value=msg_data.get("message", "-"), inline=False)
    embed.add_field(name="Interval", value=f"{msg_data.get('interval', '-') } –º–∏–Ω", inline=True)
    embed.add_field(name="Repeat", value=repeat_display, inline=True)
    embed.add_field(name="Creator", value=msg_data.get("creator", "-") or "-", inline=False)

    # –ü–æ–∫–∞–∑–≤–∞–º–µ –∫–∞–Ω–∞–ª —Å–∞–º–æ –∞–∫–æ –µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ (public embed –≥–æ –ø–æ–∫–∞–∑–≤–∞–º–µ –∫–∞—Ç–æ –∑–∞–∫–ª—é—á–µ–Ω–æ)
    channel_id = msg_data.get("channel_id") or CHANNEL_id_or_none()
    if show_channel_public:
        channel = bot.get_channel(channel_id) if channel_id else None
        value = channel.mention if channel else (str(channel_id) if channel_id else "‚Äî")
        embed.add_field(name="Channel", value=value, inline=False)
    else:
        # public embed: —É–∫–∞–∑–≤–∞–º–µ, —á–µ –∫–∞–Ω–∞–ª—ä—Ç –µ —Å–∫—Ä–∏—Ç (–≤–∏–¥–∏–º —Å–∞–º–æ –ø—Ä–∏ edit)
        embed.add_field(name="Channel", value="üîí (–≤–∏–¥–∏–º–æ —Å–∞–º–æ –∫–æ–≥–∞—Ç–æ –Ω–∞—Ç–∏—Å–Ω–µ—à Edit)", inline=False)

    embed.timestamp = datetime.utcnow()
    return embed

def CHANNEL_id_or_none():
    return CHANNEL_ID

async def update_embed_status(msg_id):
    msg_data = active_messages.get(msg_id)
    if not msg_data:
        return

    # –ü—É–±–ª–∏—á–Ω–∏—è –∫–∞–Ω–∞–ª, –≤ –∫–æ–π—Ç–æ –ø—É–±–ª–∏–∫—É–≤–∞–º–µ embed-–∏—Ç–µ —Å—ä—Å —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ, –µ global CHANNEL_ID
    channel = bot.get_channel(CHANNEL_ID) if CHANNEL_ID else None
    if not channel:
        print(f"‚ö†Ô∏è –ù—è–º–∞–º channel ({CHANNEL_ID}) –∑–∞ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ embed –∑–∞ {msg_id}.")
        return

    embed = build_configuration_embed(msg_data, show_channel_public=False)
    view = MessageButtons(msg_id)
    embed_message_id = msg_data.get("embed_message_id")

    try:
        if embed_message_id:
            try:
                embed_msg = await channel.fetch_message(embed_message_id)
            except discord.NotFound:
                embed_msg = await channel.send(embed=embed, view=view)
                record_embed_message_id(msg_id, embed_msg.id)
            else:
                await embed_msg.edit(embed=embed, view=view)
        else:
            embed_msg = await channel.send(embed=embed, view=view)
            record_embed_message_id(msg_id, embed_msg.id)
    except discord.Forbidden:
        print(f"‚ùå –ù—è–º–∞–º –ø—Ä–∞–≤–∞ –¥–∞ –æ–±–Ω–æ–≤—è embed –∑–∞ {msg_id} –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}.")
    except discord.HTTPException as error:
        print(f"‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ embed –∑–∞ {msg_id}: {error}")

# === View —Å –±—É—Ç–æ–Ω–∏ ===
class MessageButtons(discord.ui.View):
    def __init__(self, msg_id):
        super().__init__(timeout=None)
        self.msg_id = msg_id
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è—Ç–∞ –Ω–∞ custom_id-–∞—Ç–∞ —Å–µ –ø—Ä–∞–≤–∏ –≤ __init__ (–∑–∞ –¥–∞ –Ω–µ —Å–µ –¥—É–±–ª–∏—Ä–∞)
        # –±—É—Ç–æ–Ω–∏—Ç–µ —Å–∞ –¥–µ—Ñ–∏–Ω–∏—Ä–∞–Ω–∏ –∫–∞—Ç–æ –º–µ—Ç–æ–¥–∏ —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –ø–æ-–¥–æ–ª—É

    # Start - –∑–µ–ª–µ–Ω–æ
    @discord.ui.button(emoji="‚ñ∂Ô∏è", style=discord.ButtonStyle.green)
    async def start_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not has_permission(interaction.user):
            await interaction.response.send_message("üö´ –ù—è–º–∞—à –ø—Ä–∞–≤–∞ –∑–∞ —Ç–∞–∑–∏ –æ–ø–µ—Ä–∞—Ü–∏—è.", ephemeral=True)
            return
        record_embed_message_id(self.msg_id, interaction.message.id)
        msg = active_messages.get(self.msg_id)
        if not msg:
            await interaction.response.send_message("‚ùå –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–æ.", ephemeral=True)
            return
        if msg["status"] == "active":
            await interaction.response.send_message("‚ö†Ô∏è –í–µ—á–µ –µ –∞–∫—Ç–∏–≤–Ω–æ.", ephemeral=True)
            return
        msg["status"] = "active"
        # –ü—Ä–∏ —Å—Ç–∞—Ä—Ç –∏—Å–∫–∞–º–µ –¥–∞ –ø—É—Å–Ω–µ–º –≤–µ–¥–Ω–∞–≥–∞ (–∫–∞–∫ –±–µ—à–µ –¥–æ—Å–µ–≥–∞)
        await restart_message_task(self.msg_id, start_immediately=True)
        await update_embed_status(self.msg_id)
        save_messages()
        await interaction.response.send_message(f"‚ñ∂Ô∏è '{self.msg_id}' —Å—Ç–∞—Ä—Ç–∏—Ä–∞ –æ—Ç–Ω–æ–≤–æ.", ephemeral=True)

    # Stop - blurple (default)
    @discord.ui.button(emoji="‚èπÔ∏è", style=discord.ButtonStyle.blurple)
    async def stop_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not has_permission(interaction.user):
            await interaction.response.send_message("üö´ –ù—è–º–∞—à –ø—Ä–∞–≤–∞ –∑–∞ —Ç–∞–∑–∏ –æ–ø–µ—Ä–∞—Ü–∏—è.", ephemeral=True)
            return
        record_embed_message_id(self.msg_id, interaction.message.id)
        msg = active_messages.get(self.msg_id)
        if not msg:
            await interaction.response.send_message("‚ùå –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–æ.", ephemeral=True)
            return
        task = msg.get("task")
        if task:
            task.cancel()
        msg["status"] = "stopped"
        msg["task"] = None
        await update_embed_status(self.msg_id)
        save_messages()
        await interaction.response.send_message(f"‚èπÔ∏è '{self.msg_id}' –µ —Å–ø—Ä—è–Ω–æ.", ephemeral=True)

    # Delete - —Å–∏–≤, –∑–∞ –¥–∞ —Å–µ –≤–∏–∂–¥–∞ emoji-—Ç–æ
    @discord.ui.button(emoji="‚ùå", style=discord.ButtonStyle.gray)
    async def delete_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not has_permission(interaction.user):
            await interaction.response.send_message("üö´ –ù—è–º–∞—à –ø—Ä–∞–≤–∞ –∑–∞ —Ç–∞–∑–∏ –æ–ø–µ—Ä–∞—Ü–∏—è.", ephemeral=True)
            return
        record_embed_message_id(self.msg_id, interaction.message.id)
        msg = active_messages.pop(self.msg_id, None)
        if msg:
            task = msg.get("task")
            if task:
                task.cancel()
            channel = bot.get_channel(CHANNEL_ID) if CHANNEL_ID else None
            embed_message_id = msg.get("embed_message_id")
            if channel and embed_message_id:
                try:
                    embed_msg = await channel.fetch_message(embed_message_id)
                    await embed_msg.delete()
                except (discord.NotFound, discord.Forbidden):
                    pass
                except discord.HTTPException as error:
                    print(f"‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ embed –∑–∞ {self.msg_id}: {error}")
            save_messages()
            await interaction.response.send_message(f"‚ùå '{self.msg_id}' –µ –∏–∑—Ç—Ä–∏—Ç–æ.", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–æ.", ephemeral=True)

    # Edit - –≤—Ç–æ—Ä–∏—á–µ–Ω –±—É—Ç–æ–Ω (ephemeral –º–µ–Ω—é)
    @discord.ui.button(emoji="‚úèÔ∏è", style=discord.ButtonStyle.secondary)
    async def edit_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not has_edit_permission(interaction.user):
            print(f"üö´ {interaction.user} –æ–ø–∏—Ç–∞ –¥–∞ –æ—Ç–≤–æ—Ä–∏ –º–µ–Ω—é –∑–∞ —Ä–µ–¥–∞–∫—Ü–∏—è –±–µ–∑ –ø—Ä–∞–≤–∞ ({self.msg_id})")
            await interaction.response.send_message("üö´ –ù—è–º–∞—à –ø—Ä–∞–≤–∞ –¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞—à —Å—ä–æ–±—â–µ–Ω–∏—è.", ephemeral=True)
            return

        msg = active_messages.get(self.msg_id)
        if not msg:
            await interaction.response.send_message("‚ùå –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–æ.", ephemeral=True)
            return

        record_embed_message_id(self.msg_id, interaction.message.id)

        # –ü—ä—Ä–≤–æ –∏–∑–ø—Ä–∞—â–∞–º–µ ephemeral embed —Å –¥–µ—Ç–∞–π–ª–∏ (–≤–∫–ª—é—á–∏—Ç–µ–ª–Ω–æ —Ä–µ–∞–ª–Ω–∏—è –∫–∞–Ω–∞–ª), –≤–∏–¥–∏–º —Å–∞–º–æ –∑–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        channel_id = msg.get("channel_id") or CHANNEL_id_or_none()
        channel = bot.get_channel(channel_id) if channel_id else None
        ephemeral_embed = build_configuration_embed(msg, show_channel_public=True)
        # –¢—ä–π –∫–∞—Ç–æ build_configuration_embed —Å—ä—Å show_channel_public=True –∏–∑–ø–æ–ª–∑–≤–∞ channel.mention, –≤—Å–∏—á–∫–æ –µ –Ω–∞—Ä–µ–¥.

        view = EditSelectView(self.msg_id)
        await interaction.response.send_message(
            content="–ö–∞–∫–≤–æ –∏—Å–∫–∞—à –¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞—à? (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞ –∑–∞ –∫–∞–Ω–∞–ª–∞ –µ –≤–∏–¥–∏–º–∞ —Å–∞–º–æ –∑–∞ —Ç–µ–±)",
            embed=ephemeral_embed,
            view=view,
            ephemeral=True
        )

# === Edit select (–∫–∞–∫–≤–æ –¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–º–µ) ===
class EditSelect(discord.ui.Select):
    def __init__(self, msg_id: str):
        options = [
            discord.SelectOption(
                label="Message Content",
                description="Edit the message text",
                value="edit_content",
                emoji="üìù"
            ),
            discord.SelectOption(
                label="Time Interval",
                description="Edit the interval between messages",
                value="edit_interval",
                emoji="‚è±Ô∏è"
            ),
            discord.SelectOption(
                label="Repeat Count",
                description="Edit how many times the message repeats (0 = ‚àû)",
                value="edit_repeat",
                emoji="üîÅ"
            ),
            discord.SelectOption(
                label="Channel",
                description="–ò–∑–±–æ—Ä –Ω–∞ –∫–∞–Ω–∞–ª (ChannelSelect)",
                value="edit_channel",
                emoji="üí¨"
            )
        ]
        super().__init__(
            placeholder="–ò–∑–±–µ—Ä–∏ –∫–∞–∫–≤–æ –¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞—à",
            min_values=1,
            max_values=1,
            options=options,
            custom_id=f"edit_select_{msg_id}"
        )
        self.msg_id = msg_id

    async def callback(self, interaction: discord.Interaction):
        if not has_edit_permission(interaction.user):
            print(f"üö´ {interaction.user} –Ω—è–º–∞ –ø—Ä–∞–≤–∞ –∑–∞ —Ä–µ–¥–∞–∫—Ü–∏—è {self.msg_id}")
            await interaction.response.send_message(
                "üö´ –ù—è–º–∞—à –ø—Ä–∞–≤–∞ –¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞—à —Å—ä–æ–±—â–µ–Ω–∏—è.",
                ephemeral=True
            )
            return

        msg = active_messages.get(self.msg_id)
        if not msg:
            await interaction.response.send_message("‚ùå –¢–∞–∑–∏ –∑–∞–¥–∞—á–∞ –ª–∏–ø—Å–≤–∞.", ephemeral=True)
            return

        selected_option = self.values[0]

        if selected_option == "edit_content":
            await interaction.response.send_modal(ContentEditModal(self.msg_id))
        elif selected_option == "edit_interval":
            await interaction.response.send_modal(IntervalEditModal(self.msg_id))
        elif selected_option == "edit_repeat":
            await interaction.response.send_modal(RepeatEditModal(self.msg_id))
        elif selected_option == "edit_channel":
            # –û—Ç–≤–∞—Ä—è–º–µ ChannelSelect view (ephemeral)
            view = ChannelSelectView(self.msg_id)
            await interaction.response.send_message("–ò–∑–±–µ—Ä–∏ –∫–∞–Ω–∞–ª –æ—Ç —Å–ø–∏—Å—ä–∫–∞:", view=view, ephemeral=True)

class EditSelectView(discord.ui.View):
    def __init__(self, msg_id: str):
        super().__init__(timeout=120)
        self.msg_id = msg_id
        self.add_item(EditSelect(msg_id))

# === Modals –∑–∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ/–∏–Ω—Ç–µ—Ä–≤–∞–ª/–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è ===
class ContentEditModal(discord.ui.Modal):
    def __init__(self, msg_id: str):
        super().__init__(title="Edit Message Content", custom_id=f"content_modal_{msg_id}")
        self.msg_id = msg_id

        current_content = get_stored_message_content(msg_id)
        self.new_content: discord.ui.TextInput = discord.ui.TextInput(
            label="New Message Content",
            placeholder="–í—ä–≤–µ–¥–∏ –Ω–æ–≤–∏—è —Ç–µ–∫—Å—Ç",
            default=current_content[:1900],
            style=discord.TextStyle.long,
            required=True,
            custom_id="new_content"
        )
        self.add_item(self.new_content)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            if not has_edit_permission(interaction.user):
                print(f"üö´ {interaction.user} –æ–ø–∏—Ç–∞ –¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞ –±–µ–∑ –ø—Ä–∞–≤–∞ ({self.msg_id})")
                await interaction.response.send_message(
                    "üö´ –ù—è–º–∞—à –ø—Ä–∞–≤–∞ –¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞—à —Å—ä–æ–±—â–µ–Ω–∏—è.",
                    ephemeral=True
                )
                return

            msg = get_message_data(self.msg_id)
            if not msg:
                await interaction.response.send_message("‚ùå –ó–∞–¥–∞—á–∞—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞.", ephemeral=True)
                return

            new_content = self.new_content.value.strip()
            if not new_content:
                await interaction.response.send_message(
                    "‚ö†Ô∏è –°—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ –Ω–µ –º–æ–∂–µ –¥–∞ –±—ä–¥–µ –ø—Ä–∞–∑–Ω–æ.",
                    ephemeral=True
                )
                return

            update_message_content_value(self.msg_id, new_content)
            # –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ü–∏—è –Ω–µ –∏–∑–ø—Ä–∞—â–∞–º–µ –≤–µ–¥–Ω–∞–≥–∞: restart —Å start_immediately=False
            if msg.get("status") == "active":
                await restart_message_task(self.msg_id, start_immediately=False)

            await update_embed_status(self.msg_id)

            await interaction.response.send_message(
                "‚úÖ –°—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –±–µ—à–µ –æ–±–Ω–æ–≤–µ–Ω–æ. (–°–ª–µ–¥–≤–∞—â–æ—Ç–æ –∏–∑–ø—Ä–∞—â–∞–Ω–µ —â–µ –∏–∑—á–∞–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.)",
                ephemeral=True
            )
        except Exception as error:  # pylint: disable=broad-except
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ü–∏—è –Ω–∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ ({self.msg_id}): {error}")
            if not interaction.response.is_done():
                await interaction.response.send_message(
                    "‚ùå –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞—Ç–∞. –û–ø–∏—Ç–∞–π –æ—Ç–Ω–æ–≤–æ.",
                    ephemeral=True
                )

    async def on_error(self, interaction: discord.Interaction, error: Exception) -> None:
        print(f"‚ùå –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞ –≤ ContentEditModal ({self.msg_id}): {error}")
        if not interaction.response.is_done():
            await interaction.response.send_message(
                "‚ùå –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞—Ç–∞. –û–ø–∏—Ç–∞–π –æ—Ç–Ω–æ–≤–æ.",
                ephemeral=True
            )

class IntervalEditModal(discord.ui.Modal):
    def __init__(self, msg_id: str):
        super().__init__(title="Edit Time Interval", custom_id=f"interval_modal_{msg_id}")
        self.msg_id = msg_id
        current_interval = get_stored_interval(msg_id)

        default_value = str(current_interval) if current_interval is not None else ""
        self.new_interval: discord.ui.TextInput = discord.ui.TextInput(
            label="Interval (in minutes)",
            placeholder="–ù–∞–ø—Ä. 30",
            default=default_value,
            style=discord.TextStyle.short,
            required=True,
            custom_id="new_interval"
        )
        self.add_item(self.new_interval)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            if not has_edit_permission(interaction.user):
                print(f"üö´ {interaction.user} –æ–ø–∏—Ç–∞ –¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª –±–µ–∑ –ø—Ä–∞–≤–∞ ({self.msg_id})")
                await interaction.response.send_message(
                    "üö´ –ù—è–º–∞—à –ø—Ä–∞–≤–∞ –¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞—à —Å—ä–æ–±—â–µ–Ω–∏—è.",
                    ephemeral=True
                )
                return

            msg = get_message_data(self.msg_id)
            if not msg:
                await interaction.response.send_message("‚ùå –ó–∞–¥–∞—á–∞—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞.", ephemeral=True)
                return

            try:
                new_interval = int(self.new_interval.value)
            except ValueError:
                await interaction.response.send_message(
                    "‚ö†Ô∏è –ú–æ–ª—è, –≤—ä–≤–µ–¥–∏ –≤–∞–ª–∏–¥–Ω–æ —Ü—è–ª–æ —á–∏—Å–ª–æ –∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.",
                    ephemeral=True
                )
                return

            if new_interval <= 0:
                await interaction.response.send_message(
                    "‚ö†Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ-–≥–æ–ª—è–º –æ—Ç 0.",
                    ephemeral=True
                )
                return

            update_interval_value(self.msg_id, new_interval)

            if msg.get("status") == "active":
                # –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ü–∏—è: –ù–ï –∏–∑–ø—Ä–∞—â–∞–º–µ –≤–µ–¥–Ω–∞–≥–∞
                await restart_message_task(self.msg_id, start_immediately=False)

            await update_embed_status(self.msg_id)

            await interaction.response.send_message(
                "‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ä—Ç –±–µ—à–µ –æ–±–Ω–æ–≤–µ–Ω. (–°–ª–µ–¥–≤–∞—â–æ—Ç–æ –∏–∑–ø—Ä–∞—â–∞–Ω–µ —â–µ –∏–∑—á–∞–∫–∞ –Ω–æ–≤–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª.)",
                ephemeral=True
            )
        except Exception as error:  # pylint: disable=broad-except
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ü–∏—è –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª ({self.msg_id}): {error}")
            if not interaction.response.is_done():
                await interaction.response.send_message(
                    "‚ùå –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞—Ç–∞. –û–ø–∏—Ç–∞–π –æ—Ç–Ω–æ–≤–æ.",
                    ephemeral=True
                )

    async def on_error(self, interaction: discord.Interaction, error: Exception) -> None:
        print(f"‚ùå –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞ –≤ IntervalEditModal ({self.msg_id}): {error}")
        if not interaction.response.is_done():
            await interaction.response.send_message(
                "‚ùå –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞—Ç–∞. –û–ø–∏—Ç–∞–π –æ—Ç–Ω–æ–≤–æ.",
                ephemeral=True
            )

class RepeatEditModal(discord.ui.Modal):
    def __init__(self, msg_id: str):
        super().__init__(title="Edit Repeat Count", custom_id=f"repeat_modal_{msg_id}")
        self.msg_id = msg_id
        current_repeat = get_stored_repeat(msg_id)

        default_value = str(current_repeat) if current_repeat is not None else ""
        self.new_repeat: discord.ui.TextInput = discord.ui.TextInput(
            label="Repeat Count (0 = ‚àû)",
            placeholder="–ù–∞–ø—Ä. 5",
            default=default_value,
            style=discord.TextStyle.short,
            required=True,
            custom_id="new_repeat"
        )
        self.add_item(self.new_repeat)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            if not has_edit_permission(interaction.user):
                print(f"üö´ {interaction.user} –æ–ø–∏—Ç–∞ –¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –±–µ–∑ –ø—Ä–∞–≤–∞ ({self.msg_id})")
                await interaction.response.send_message(
                    "üö´ –ù—è–º–∞—à –ø—Ä–∞–≤–∞ –¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞—à —Å—ä–æ–±—â–µ–Ω–∏—è.",
                    ephemeral=True
                )
                return

            msg = get_message_data(self.msg_id)
            if not msg:
                await interaction.response.send_message("‚ùå –ó–∞–¥–∞—á–∞—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞.", ephemeral=True)
                return

            try:
                new_repeat = int(self.new_repeat.value)
            except ValueError:
                await interaction.response.send_message(
                    "‚ö†Ô∏è –í—ä–≤–µ–¥–∏ –≤–∞–ª–∏–¥–Ω–æ —Ü—è–ª–æ —á–∏—Å–ª–æ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è—Ç–∞.",
                    ephemeral=True
                )
                return

            if new_repeat < 0:
                await interaction.response.send_message(
                    "‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è—Ç–∞ –Ω–µ –º–æ–≥–∞—Ç –¥–∞ —Å–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª–Ω–∏.",
                    ephemeral=True
                )
                return

            update_repeat_value(self.msg_id, new_repeat)

            if msg.get("status") == "active":
                await restart_message_task(self.msg_id, start_immediately=False)

            await update_embed_status(self.msg_id)

            await interaction.response.send_message(
                "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ç–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è—Ç–∞ –±–µ—à–µ –æ–±–Ω–æ–≤–µ–Ω–∞. (–°–ª–µ–¥–≤–∞—â–æ—Ç–æ –∏–∑–ø—Ä–∞—â–∞–Ω–µ —â–µ –∏–∑—á–∞–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.)",
                ephemeral=True
            )
        except Exception as error:  # pylint: disable=broad-except
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ü–∏—è –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è ({self.msg_id}): {error}")
            if not interaction.response.is_done():
                await interaction.response.send_message(
                    "‚ùå –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞—Ç–∞. –û–ø–∏—Ç–∞–π –æ—Ç–Ω–æ–≤–æ.",
                    ephemeral=True
                )

    async def on_error(self, interaction: discord.Interaction, error: Exception) -> None:
        print(f"‚ùå –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞ –≤ RepeatEditModal ({self.msg_id}): {error}")
        if not interaction.response.is_done():
            await interaction.response.send_message(
                "‚ùå –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞—Ç–∞. –û–ø–∏—Ç–∞–π –æ—Ç–Ω–æ–≤–æ.",
                ephemeral=True
            )

# === ChannelSelect view (–∑–∞ –∏–∑–±–æ—Ä –Ω–∞ –∫–∞–Ω–∞–ª) ===
class ChannelSelect(discord.ui.ChannelSelect):
    def __init__(self, msg_id: str):
        super().__init__(custom_id=f"channel_select_{msg_id}", placeholder="–ò–∑–±–µ—Ä–∏ —Ç–µ–∫—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª", channel_types=[discord.ChannelType.text])
        self.msg_id = msg_id

    async def callback(self, interaction: discord.Interaction):
        if not has_edit_permission(interaction.user):
            await interaction.response.send_message("üö´ –ù—è–º–∞—à –ø—Ä–∞–≤–∞ –¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞—à –∫–∞–Ω–∞–ª–∞.", ephemeral=True)
            return

        # ChannelSelect –≤—Ä—ä—â–∞ list –Ω–∞ –∏–∑–±—Ä–∞–Ω–∏—Ç–µ –∫–∞–Ω–∞–ª–∏ –ø–æ–¥ attribute self.values (–≤ discord.py)
        try:
            selected_channel = self.values[0]  # —Ç–æ–≤–∞ –µ –æ–±–µ–∫—Ç –∫–∞–Ω–∞–ª
            new_channel_id = selected_channel.id
        except Exception:
            # –ê–∫–æ –Ω—è–º–∞ –∏–∑–±—Ä–∞–Ω –∫–∞–Ω–∞–ª (—Ä—è–¥–∫–æ), –ø–ª–∞–≤–Ω–æ —Å–µ –≤—Ä—ä—â–∞–º–µ
            await interaction.response.send_message("‚ö†Ô∏è –ù—è–º–∞ –∏–∑–±—Ä–∞–Ω –∫–∞–Ω–∞–ª.", ephemeral=True)
            return

        try:
            update_channel_value(self.msg_id, new_channel_id)

            msg = get_message_data(self.msg_id)
            if msg and msg.get("status") == "active":
                # –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ü–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–∞: –ø–∞–∫ –Ω–µ –ø—Ä–∞—â–∞–º–µ –≤–µ–¥–Ω–∞–≥–∞ –≤ –Ω–æ–≤–∏—è –∫–∞–Ω–∞–ª,
                # —Å—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ –∑–∞–¥–∞—á–∞—Ç–∞ —Ç–∞–∫–∞ —á–µ –ø—ä—Ä–≤–æ—Ç–æ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –¥–∞ –∏–∑—á–∞–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                await restart_message_task(self.msg_id, start_immediately=False)

            await update_embed_status(self.msg_id)

            await interaction.response.send_message(f"‚úÖ –ö–∞–Ω–∞–ª—ä—Ç –±–µ—à–µ –æ–±–Ω–æ–≤–µ–Ω –Ω–∞ <#{new_channel_id}>. (–°–ª–µ–¥–≤–∞—â–æ—Ç–æ –∏–∑–ø—Ä–∞—â–∞–Ω–µ —â–µ –∏–∑—á–∞–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.)", ephemeral=True)
        except Exception as e:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ update channel ({self.msg_id}): {e}")
            if not interaction.response.is_done():
                await interaction.response.send_message("‚ùå –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –∫–∞–Ω–∞–ª–∞.", ephemeral=True)

class ChannelSelectView(discord.ui.View):
    def __init__(self, msg_id: str):
        super().__init__(timeout=120)
        self.msg_id = msg_id
        self.add_item(ChannelSelect(msg_id))
        # –î–æ–±–∞–≤—è–º–µ –±—É—Ç–æ–Ω –∑–∞ –æ—Ç–∫–∞–∑
        self.add_item(CancelButton())

class CancelButton(discord.ui.Button):
    def __init__(self):
        super().__init__(label="–û—Ç–∫–∞–∑", style=discord.ButtonStyle.secondary, custom_id="cancel_channel_select")

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.send_message("‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ.", ephemeral=True)

# === –ö–æ–º–∞–Ω–¥–∏ ===
@bot.event
async def on_ready():
    print(f"‚úÖ –í–ª—è–∑—ä–ª —Å—ä–º –∫–∞—Ç–æ {bot.user}")
    try:
        if guild:
            await tree.sync(guild=guild)
            print(f"üîÅ –ö–æ–º–∞–Ω–¥–∏—Ç–µ —Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–∏ –∑–∞ guild {GUILD_ID}")
        else:
            await tree.sync()
            print("üîÅ –ö–æ–º–∞–Ω–¥–∏—Ç–µ —Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–∏.")
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ç–µ: {e}")
    await load_messages()
    print("üîÅ –í—ä–∑—Å—Ç–∞–Ω–æ–≤–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–∏ —Å—ä–æ–±—â–µ–Ω–∏—è.")

@tree.command(name="create", description="–°—ä–∑–¥–∞–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ.")
@app_commands.describe(
    message="–¢–µ–∫—Å—Ç –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ",
    interval="–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∏ (>0)",
    repeat="–ë—Ä–æ–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (0 = –±–µ–∑–∫—Ä–∞–π–Ω–æ)",
    id="–£–Ω–∏–∫–∞–ª–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä",
    channel="–ö–∞–Ω–∞–ª (–ø–æ –∏–∑–±–æ—Ä) - –∞–∫–æ –Ω–µ –µ –∑–∞–¥–∞–¥–µ–Ω, —Å–µ –ø–æ–ª–∑–≤–∞ default"
)
async def create(interaction: discord.Interaction, message: str, interval: int, repeat: int, id: str, channel: Optional[discord.TextChannel] = None):
    if not has_permission(interaction.user):
        await interaction.response.send_message("üö´ –ù—è–º–∞—à –ø—Ä–∞–≤–∞ –¥–∞ —Å—ä–∑–¥–∞–≤–∞—à —Å—ä–æ–±—â–µ–Ω–∏—è.", ephemeral=True)
        return
    if id in active_messages:
        await interaction.response.send_message(f"‚ö†Ô∏è '{id}' –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞.", ephemeral=True)
        return
    if interval <= 0:
        await interaction.response.send_message("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ > 0.", ephemeral=True)
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–º–µ channel_id: –∞–∫–æ –∫–æ–º–∞–Ω–¥–∞—Ç–∞ –ø–æ–¥–∞–¥–µ –∫–∞–Ω–∞–ª, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –Ω–µ–≥–æ
    channel_id_for_task = channel.id if channel else (CHANNEL_ID if CHANNEL_ID else None)
    if channel_id_for_task is None:
        await interaction.response.send_message(
            f"‚ùå –ù—è–º–∞ –∑–∞–¥–∞–¥–µ–Ω default –∫–∞–Ω–∞–ª –∏ –Ω–µ –∏–∑–±—Ä–∞ –∫–∞–Ω–∞–ª –≤ –∫–æ–º–∞–Ω–¥–∞—Ç–∞.",
            ephemeral=True
        )
        return

    msg_data = {
        "task": None,
        "message": message,
        "interval": interval,
        "repeat": repeat,
        "id": id,
        "creator": interaction.user.name,
        "status": "active",
        "embed_message_id": None,
        "channel_id": channel_id_for_task
    }
    active_messages[id] = msg_data
    save_messages()
    # –ü—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ - –æ—Å—Ç–∞–≤—è–º–µ —Å—Ç–∞—Ä–æ—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –∏–∑–ø—Ä–∞—â–∞ –≤–µ–¥–Ω–∞–≥–∞
    await restart_message_task(id, start_immediately=True)
    await update_embed_status(id)
    await interaction.response.send_message(f"‚úÖ –°—ä–∑–¥–∞–¥–µ–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ '{id}'.", ephemeral=True)

@tree.command(name="list", description="–ü–æ–∫–∞–∂–∏ –≤—Å–∏—á–∫–∏ —Å—ä–æ–±—â–µ–Ω–∏—è —Å –±—É—Ç–æ–Ω–∏.")
async def list_messages(interaction: discord.Interaction):
    if not has_permission(interaction.user):
        await interaction.response.send_message("üö´ –ù—è–º–∞—à –ø—Ä–∞–≤–∞ –∑–∞ —Ç–∞–∑–∏ –∫–æ–º–∞–Ω–¥–∞.", ephemeral=True)
        return
    if not active_messages:
        await interaction.response.send_message("‚ÑπÔ∏è –ù—è–º–∞ —Å—ä–æ–±—â–µ–Ω–∏—è.", ephemeral=True)
        return

    await interaction.response.send_message("üìã –í—Å–∏—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏ —Å—ä–æ–±—â–µ–Ω–∏—è:", ephemeral=True)
    for msg in active_messages.values():
        color = discord.Color.green() if msg["status"] == "active" else discord.Color.red()
        embed = discord.Embed(
            title=f"üÜî {msg['id']} ({msg['status']})",
            description=(
                f"üí¨ {msg['message']}\n"
                f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: {msg['interval']} –º–∏–Ω\n"
                f"üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {'‚àû' if msg['repeat']==0 else msg['repeat']}\n"
                f"üë§ –û—Ç: {msg['creator']}"
            ),
            color=color
        )
        # –ü—É–±–ª–∏—á–Ω–æ –≤ /list –Ω–µ –ø–æ–∫–∞–∑–≤–∞–º–µ –∫–∞–Ω–∞–ª–∞ (–ø–æ –∏–∑–∏—Å–∫–≤–∞–Ω–µ) - —É–∫–∞–∑–≤–∞–º–µ, —á–µ –µ –≤–∏–¥–∏–º —Å–∞–º–æ –ø—Ä–∏ edit
        embed.add_field(name="Channel", value="üîí (–≤–∏–¥–∏–º–æ —Å–∞–º–æ –∫–æ–≥–∞—Ç–æ –Ω–∞—Ç–∏—Å–Ω–µ—à Edit)", inline=False)
        await interaction.followup.send(embed=embed, view=MessageButtons(msg["id"]), ephemeral=True)

@tree.command(name="help_create", description="–ü–æ–∫–∞–∑–≤–∞ –ø—Ä–∏–º–µ—Ä –∑–∞ /create")
async def help_create(interaction: discord.Interaction):
    if not has_permission(interaction.user):
        await interaction.response.send_message("üö´ –ù—è–º–∞—à –ø—Ä–∞–≤–∞ –∑–∞ —Ç–∞–∑–∏ –∫–æ–º–∞–Ω–¥–∞.", ephemeral=True)
        return
    example = (
        "üß† **–ü—Ä–∏–º–µ—Ä:**\n"
        "```\n"
        "/create message:\"–†–∞–π–¥ —Å–ª–µ–¥ 1 —á–∞—Å!\" interval:120 repeat:0 id:\"raid\" channel:#general\n"
        "```\n"
        "- `message`: –¢–µ–∫—Å—Ç –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ\n"
        "- `interval`: –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∏\n"
        "- `repeat`: –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (0 = –±–µ–∑–∫—Ä–∞–π–Ω–æ)\n"
        "- `id`: –ò–º–µ –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ\n"
        "- `channel`: (–ø–æ –∏–∑–±–æ—Ä) –∫–∞–Ω–∞–ª –∑–∞ –∏–∑–ø—Ä–∞—â–∞–Ω–µ"
    )
    await interaction.response.send_message(example, ephemeral=True)

# === –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –±–æ—Ç–∞ ===
if not TOKEN:
    print("‚ùå –ì—Ä–µ—à–∫–∞: –ù–µ –µ –∑–∞–¥–∞–¥–µ–Ω DISCORD_TOKEN –∫–∞—Ç–æ env –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∞.")
else:
    bot.run(TOKEN)

